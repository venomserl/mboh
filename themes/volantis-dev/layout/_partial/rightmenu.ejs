<% if (theme.rightmenu.enable == true && theme.rightmenu.layout.length > 0) { %>
  <% let faIcon = theme.rightmenu.faicon %>
  <% function loadmenu(obj) { %>
    <li class="menuLoad-Content">
      <a class='vlts-menu fix-cursor-default' <%= obj.url ? 'href='+ url_for(obj.url)+'' : ''%>
        <% if (obj.rel) { %>
          rel="<%- obj.rel %>"
        <% } %>
        <% if (obj.target) { %>
          target="<%- obj.target %>"
        <% } %>
        <% if (obj.onclick) { %>
          onclick="<%- obj.onclick %>"
        <% } %>
        <% if (obj.id) { %>
          id="<%- obj.id %>"
        <% } else if (obj.url) { %>
          id="<%= url_for(obj.url).replace(/\/|%|\./g, "")?url_for(obj.url).replace(/\/|%|\./g, ""):"home" %>"
        <% } %>
      >
        <% if (obj.icon) { %><i class='<%= obj.icon %> fa-fw'></i><% } %> <%- obj.name %>
      </a>
    </li>
  <% } %>

  <div id="rightmenu-wrapper">
    <ul class="list-v rightmenu" id="rightmenu-content">
      <li class='navigation menuNavigation-Content'>
        <a class='nav icon-only fix-cursor-default' onclick='history.back()'><i class='<%= faIcon %> fa-arrow-left fa-fw'></i></a>
        <a class='nav icon-only fix-cursor-default' onclick='history.forward()'><i class='<%= faIcon %> fa-arrow-right fa-fw'></i></a>
        <a class='nav icon-only fix-cursor-default' onclick='window.location.reload()'><i class='<%= faIcon %> fa-redo fa-fw'></i></a>
        <a class='nav icon-only fix-cursor-default' href='/'><i class='<%= faIcon %> fa-home fa-fw'></i></a>
      </li>
      <li class='option menuOption-Content'>
        <a class='vlts-menu opt fix-cursor-default menu-Option' data-fn-type='copyText'>
          <i class='<%= faIcon %> fa-copy fa-fw'></i><%- __('rightmenu.copy_text') %>
        </a>
        <a class='vlts-menu opt fix-cursor-default menu-Option' data-fn-type='copyPaste'>
          <i class='<%= faIcon %> fa-paste fa-fw'></i><%- __('rightmenu.copy_paste') %>
        </a>
        <a class='vlts-menu opt fix-cursor-default menu-Option' data-fn-type='copySelect'>
          <i class='<%= faIcon %> fa-object-ungroup fa-fw'></i><%- __('rightmenu.copy_select') %>
        </a>
        <a class='vlts-menu opt fix-cursor-default menu-Option' data-fn-type='copyCut'>
          <i class='<%= faIcon %> fa-cut fa-fw'></i><%- __('rightmenu.copy_cut') %>
        </a>
        <a class='vlts-menu opt fix-cursor-default menu-Option' data-fn-type='openTab'>
          <i class='<%= faIcon %> fa-external-link-square-alt fa-fw'></i><%- __('rightmenu.open_in_new_tab') %>
        </a>
        <a class='vlts-menu opt fix-cursor-default menu-Option' data-fn-type='copySrc'>
          <i class='<%= faIcon %> fa-image fa-fw'></i><%- __('rightmenu.copy_image_src') %>
        </a>
      </li>
      <% theme.rightmenu.layout.forEach(function(item){ %>
        <% if (item == 'hr') { %>
          <hr class="menuLoad-Content">
        <% } else if (item == 'darkmode') { %>
          <li class='option menuOption-Content'>
            <a class='vlts-menu fix-cursor-default toggle-mode-btn menu-Option' data-fn-type='menuDarkBtn'>
              <i class='<%= theme.rightmenu.darkmode.dark %> fa-fw '></i> <%- trim(theme.rightmenu.darkmode.name) %>
            </a>
          </li>
        <% } else if (item == 'music' && theme.plugins.aplayer.enable == true) { %>
          <li class='music name menuOption-Content'>
            <p class='nav music-title fix-cursor-default'></p>
          </li>
          <li class='music ctrl'>
            <a class='nav icon-only backward fix-cursor-default' onclick='aplayerBackward()'><i class='fa fa-step-backward fa-fw'></i></a>
            <a class='nav icon-only toggle fix-cursor-default' onclick='aplayerToggle()'><i class='fa fa-play fa-fw'></i></a>
            <a class='nav icon-only forward fix-cursor-default' onclick='aplayerForward()'><i class='fa fa-step-forward fa-fw'></i></a>
          </li>
          <li class='music volume'>
            <a class='nav volume'>
              <div class="aplayer-volume-bar-wrap">
                <div class="aplayer-volume-bar fix-cursor-pointer">
                  <div class="aplayer-volume"></div>
                  <i class='left fa fa-volume-off fa-fw'></i>
                  <i class='right fa fa-volume-up fa-fw'></i>
                </div>
              </div>
            </a>
          </li>
        <% } else if (item in theme.rightmenu) { %>
          <% loadmenu(theme.rightmenu[item]) %>
        <% } %>
      <% }) %>
    </ul>
  </div>

  <script>
    $(function () {
      rightMenu.init();
    });

    var rightMenu = (function (model) {
      const fn = {},
            _rightMenuWrapper = document.getElementById('rightmenu-wrapper'),
            _rightMenuContent = document.getElementById('rightmenu-content');

      const $menuLoad =  $('.menuLoad-Content'),
            $menuOption =  $('.menuOption-Content'),
            $menuDarkBtn =  $('.menu-Option[data-fn-type="menuDarkBtn"]');

      const $copyText = $('.menu-Option[data-fn-type="copyText"]'),
            $copyPaste = $('.menu-Option[data-fn-type="copyPaste"]'),
            $copySelect = $('.menu-Option[data-fn-type="copySelect"]'),
            $copyCut = $('.menu-Option[data-fn-type="copyCut"]'),
            $copyHref = $('.menu-Option[data-fn-type="copyHref"]'),
            $copySrc = $('.menu-Option[data-fn-type="copySrc"]'),
            $openTab = $('.menu-Option[data-fn-type="openTab"]');

      const darkmodeDark = '<%= theme.rightmenu.darkmode.dark %>' || 'fa fa-moon',
            darkmodeWhite = '<%= theme.rightmenu.darkmode.white %>' || 'fa fa-sun';
            
      model.init = () => {
        fn.init();
        fn.initEvent();
      }

      fn.init = () => {
        $copyText.hide();
        $copySelect.hide();
        $copyPaste.hide();
        $copyCut.hide();
        $copyHref.hide();
        $copySrc.hide();
        $openTab.hide();
      }

      fn.initEvent = () => {
        window.document.oncontextmenu = (event) => {
          if (event.ctrlKey || $(window).width() <= 500) {
            fn.hideMenu();
            return true;
          }
          return fn.popMenu(event);
        }

        _rightMenuWrapper.oncontextmenu = (event) => {
          event.stopPropagation();
          event.preventDefault();
          return false;
        }

        document.addEventListener('click', () => {
          fn.hideMenu();
        })
      }

      // 菜单位置设定
      fn.popMenu = (event) => {
        let mouseClientX = event.clientX;
        let mouseClientY = event.clientY;
        let menuWidth = _rightMenuContent.offsetWidth;
        let menuHeight = _rightMenuContent.offsetHeight;
        let screenWidth = document.documentElement.clientWidth || document.body.clientWidth;
        let screenHeight = document.documentElement.clientHeight || document.body.clientHeight;
        let showLeft = mouseClientX + menuWidth > screenWidth ? mouseClientX - menuWidth + 10 : mouseClientX;
        let showTop = mouseClientY + menuHeight > screenHeight ? mouseClientY - menuHeight + 10 : mouseClientY;
        
        try {
          fn.setMenuItem(event);
          _rightMenuWrapper.style.left = showLeft + "px";
          _rightMenuWrapper.style.top = showTop + "px";
          _rightMenuWrapper.style.display = 'block';
        } catch (error) {
          console.error(error);
          return true;
        }

        return false;
      }

      // 菜单项设置
      fn.setMenuItem = (event) => {
        let optionFlag = false;
        const eventTarget = event.target;
        const selectText = window.getSelection().toString();

         // 对应更改图标
        if ($menuDarkBtn) {
          $menuDarkBtn.one('click.rightMenu.setMenuDark', (event) => {
            $menuDarkBtn.children().toggleClass(darkmodeDark);
            $menuDarkBtn.children().toggleClass(darkmodeWhite);
          })
        }
        
        // 判断是否是输入框
        if($(eventTarget).is('input') || $(eventTarget).is('textarea')) {
          const inputStr = $(eventTarget).val();

          // 复制
          if(inputStr.length > 0) {
            $copySelect.show();
            $copySelect.one("click.rightMenu.copySelect", () => {
              $(eventTarget).select();
            })
          } else {
            $copySelect.hide();
          }

          // 剪切
          if(selectText) {
            $copyCut.show();
            $copyCut.one("click.rightMenu.copyCut", () => {
              const statrPos = eventTarget.selectionStart;
              const endPos = eventTarget.selectionEnd;
              fn.copyString(selectText);
              $(eventTarget).val(inputStr.substring(0, statrPos) + inputStr.substring(endPos, inputStr.length));
              eventTarget.selectionStart = statrPos;
              eventTarget.selectionEnd = statrPos;
              $(eventTarget).focus();
            })
          } else {
            $copyCut.hide();
          }

          // 粘贴
          fn.readClipboard().then(text => {
            // 如果剪切板存在内容
            if (!!text) {
              $copyPaste.show();
              $copyPaste.off("click.rightMenu.cpoyPaste").one("click.rightMenu.cpoyPaste", () => {
                fn.insertAtCaret($(eventTarget), text);
              })
            } else {
              $copyPaste.hide();
            }
          }).catch((err) => {
            console.error(err);
            $copyPaste.hide();
          });
        } else {
          $copySelect.hide();
          $copyPaste.hide();
          $copyCut.hide();
        }

        // 新标签打开
        const eventHref = eventTarget.href;
        if (!!eventHref) {
          optionFlag = true;
          $copyHref.show();
          $openTab.show();
          $copyHref.one("click.rightMenu.copyHref", () => {
            fn.copyString(eventHref);
          });
          $openTab.one("click.rightMenu.openTab", () => {
            window.open(eventHref);
          });
        } else {
          $copyHref.hide();
          $openTab.hide();
        }

        // 复制图片
        const eventSrc = eventTarget.currentSrc;
        if (!!eventSrc) {
            optionFlag = true;
            $copySrc.show();
            $copySrc.one("click.rightMenu.copySrc", () => {
              fn.copyString(eventSrc);
            });
          } else {
            $copySrc.hide();
          }

        // 选中文本
        if (selectText) {
          if ('<%= theme.plugins.clipboard.enable %>' == 'true') {
            optionFlag = true;
            $copyText.show();
            $copyText.one("click.rightMenu.cpoyText", () => {
              fn.copyString(selectText);
            })
          }
        } else {
          $copyText.hide();
        }

        if(optionFlag) {
          $menuLoad.hide();
        } else {
          $menuLoad.show();
        }

        // 有音乐播放器 see: layout/_third-party/aplayer/script.ejs
        <% if (theme.plugins.aplayer.enable && (theme.rightmenu.layout||[]).includes('music')) { %>
        if(volantis.APlayerLoaded){ // APlayer加载完成？
          // 如果有aplayer，初始化一下
          checkAPlayer();
        }
        <% } %>
      }

      // 隐藏菜单
      fn.hideMenu = () => {
        _rightMenuWrapper.style.display = 'none';
      }

      // 复制字符串
      fn.copyString = (str) => {
        fn.copyText(str)
          .then(() => {
            volantis.message('操作提示', str.length > 120 ? str.substring(0, 120) + '...' : str, 'info');
          }).catch(e => {
            volantis.message('操作提示', e, 'error');
          })
      }

      // 兼容处理
      fn.copyText = (str) => {
        try {
          return navigator.clipboard
            .writeText(str)
            .then(() => {
              return Promise.resolve()
            })
            .catch(err => {
              return Promise.reject(err)
            })
        } catch (e) {
          const input = document.createElement('input');
          input.setAttribute('readonly', 'readonly');
          document.body.appendChild(input);
          input.setAttribute('value', str);
          input.select();
          try {
            let result = document.execCommand('copy')
            document.body.removeChild(input);
            if (!result || result === 'unsuccessful') {
              return Promise.reject('复制文本失败!')
            } else {
              return Promise.resolve()
            }
          } catch (e) {
            document.body.removeChild(input);
            return Promise.reject(
              '当前浏览器不支持复制功能，请检查更新或更换其他浏览器操作!'
            )
          }
        }
      }

      // 粘贴文本
      fn.insertAtCaret = function($elemt, value) {
        const elemt = $elemt[0];
        const startPos = elemt.selectionStart,
              endPos = elemt.selectionEnd;
        if (document.selection) { 
            $elemt.focus(); 
            var sel = document.selection.createRange(); 
            sel.text = value; 
            $elemt.focus(); 
        } else {
          if (startPos || startPos == '0') { 
            var scrollTop = elemt.scrollTop; 
            elemt.value = elemt.value.substring(0, startPos) + value + elemt.value.substring(endPos, elemt.value.length); 
            $elemt.focus(); 
            elemt.selectionStart = startPos + value.length; 
            elemt.selectionEnd = startPos + value.length; 
            elemt.scrollTop = scrollTop; 
          } else { 
            $elemt.value += value; 
            $elemt.focus(); 
          }
        }
      }

      // 请求读取剪切板
      fn.readClipboard = async () => {
        const result = await navigator.permissions.query({ name: 'clipboard-read' });
        if (result.state === 'granted' || result.state === 'prompt') {
          return navigator.clipboard
            .readText()
            .then(text => text)
            .catch(err => Promise.reject(err));
        }
        return Promise.reject(result);
      }

      return model;
    }(rightMenu || {}));
  </script>
<% } %>
